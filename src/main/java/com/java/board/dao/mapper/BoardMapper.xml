<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dto.boardDto">

	<resultMap type="com.java.board.dto.BoardDto" id="boardDto">
		<result column="board_no" property="boardNo" />
		<result column="post_id" property="postId" />
		<result column="board_code" property="boardCode" />
		<result column="title" property="title" />
		<result column="content" property="content" />
		<result column="area" property="area" />
		<result column="write_date" property="writeDate" />
		<result column="update_date" property="updateDate" />
		<result column="read_cnt" property="readCnt" />
		<result column="like_cnt" property="likeCnt" />
		<result column="is_del" property="isDel" />
		<result column="is_popular" property="isPopular" />
		<result column="is_notice" property="isNotice" />
	</resultMap>
	<resultMap type="com.java.board.dto.BoardFileDto" id="boardFileDto">
		<result column="file_no" property="fileNo"/>
		<result column="file_name" property="fileName"/>
		<result column="file_path" property="filePath"/>
		<result column="file_extension" property="fileExtension"/>
	</resultMap>
	<resultMap type="com.java.board.dto.MapDto" id="mapDto">
		<result column="map_no" property="mapNo"/>
		<result column="x_axis" property="xAxis"/>
		<result column="y_axis" property="yAxis"/>
	</resultMap>
	<resultMap type="com.java.board.dto.NoticeDto" id="noticeDto">
		<result column="notice_no" property="noticeNo"/>
		<result column="title" property="title"/>
		<result column="content" property="content"/>
		<result column="read_cnt" property="readCnt"/>
		<result column="is_notice" property="isNotice"/>
		<result column="write_date" property="writeDate"/>
		<result column="update_date" property="updateDate"/>
	</resultMap>
	<resultMap type="com.java.board.dto.ReplyDto" id="replyDto">
		<result column="reply_no" property="replyNo"/>
		<result column="board_no" property="boardNo" />
		<result column="board_code" property="boardCode" />
		<result column="post_id" property="postId"/>
		<result column="id" property="id"/>
		<result column="content" property="content"/>
		<result column="write_date" property="writeDate"/>
		<result column="update_date" property="updateDate"/>
		<result column="is_del" property="isDel"/>
		<result column="group_no" property="groupNo"/>
		<result column="sequence_no" property="sequenceNo"/>
	</resultMap>

	<!-- 일반글작성_파일,지도 포함 -->
	<insert id="board_file_map_insert" parameterType="java.util.Map">
		insert all
		into board (board_no, post_id, board_code, title, content, area, write_date)
		values(
				board_no_seq.nextval,
				#{boardDto.postId},
				#{boardDto.boardCode},
				#{boardDto.title},
				#{boardDto.content},
				#{boardDto.area},
				sysdate
				)
		into board_file (file_no, board_no, post_id, board_code, file_name, file_path, file_extension)
		values(
				file_no_seq.nextval,
				board_no_seq.nextval,
				#{boardDto.postId},
				#{boardDto.boardCode},
				#{boardFileDto.fileName}, 
				#{boardFileDto.filePath}, 
				#{boardFileDto.fileExtension}
				)
		into map (map_no, board_no, post_id, board_code, x_axis, y_axis)
		values(
				map_no_seq.nextval,
				board_no_seq.nextval,
				#{boardDto.postId},
				#{boardDto.boardCode},
				#{mapDto.xAxis},
				#{mapDto.yAxis}
				)
		select * from dual
	</insert>
	<!-- 일반글_파일만 -->
	<insert id="board_file_insert" parameterType="java.util.Map">
		insert all
		into board (board_no, post_id, board_code, title, content, area, write_date)
		values(
				board_no_seq.nextval,
				#{boardDto.postId},
				#{boardDto.boardCode},
				#{boardDto.title},
				#{boardDto.content},
				#{boardDto.area},
				sysdate
				)
		into board_file (file_no, board_no, post_id, board_code, file_name, file_path, file_extension)
		values(
				file_no_seq.nextval,
				board_no_seq.nextval,
				#{boardDto.postId},
				#{boardDto.boardCode},
				#{boardFileDto.fileName}, 
				#{boardFileDto.filePath}, 
				#{boardFileDto.fileExtension}
				)
		select * from dual
	</insert>
	<!-- 일반글_지도만 -->
	<insert id="board_map_insert" parameterType="java.util.Map">
		insert all
		into board (board_no, post_id, board_code, title, content, area, write_date)
		values(
				board_no_seq.nextval,
				#{boardDto.postId},
				#{boardDto.boardCode},
				#{boardDto.title},
				#{boardDto.content},
				#{boardDto.area},
				sysdate
				)
		into map (map_no, board_no, post_id, board_code, x_axis, y_axis)
		values(
				map_no_seq.nextval,
				board_no_seq.nextval,
				#{boardDto.postId},
				#{boardDto.boardCode},
				#{mapDto.xAxis},
				#{mapDto.yAxis}
				)
		select * from dual
	</insert>
	<!-- 일반글_글만 -->
	<insert id="board_insert" parameterType="java.util.Map">
		insert
		into board (board_no, post_id, board_code, title, content, area, write_date)
		values(
				board_no_seq.nextval,
				#{boardDto.postId},
				#{boardDto.boardCode},
				#{boardDto.title},
				#{boardDto.content},
				#{boardDto.area},
				sysdate
				)
	</insert>
	
	<!-- 공지글작성 -->
	<insert id="notice_insert" parameterType="java.util.Map">
		insert into board (board_no, post_id, board_code, title, content, area, write_date, is_notice)
		values(
				board_no_seq.nextval,
				#{boardDto.postId},
				#{boardDto.boardCode},
				#{boardDto.title},
				#{boardDto.content},
				#{boardDto.area},
				sysdate,
				1
				)
	</insert>
	
	<!-- 게시글검색조건 -->
	<sql id="searchCondition">
		<if test="keyword != null and keyword != '' ">
			<if test="searchType == 'title'.toString()">
				and title like '%' || #{keyword} || '%'
			</if>
			<if test="searchType == 'postId'.toString()">
				and post_id like '%' || #{keyword} || '%'
			</if>
			<if test="searchType == 'tc'.toString()">
				and title like '%' || #{keyword} || '%'
					or content like '%' || #{keyword} || '%'
			</if>
		</if>
	</sql>
	<!-- ============================================================================================================ -->
	<!-- 동행 게시판 리스트, 카운트 -->
	<select id="accompanyboard_list" parameterType="java.util.Map" resultMap="boardDto">
		<![CDATA[
		select board_no, title, post_id, write_date, read_cnt, area, is_notice, is_popular
		from (
		        select row_number() over(order by is_notice desc,  is_popular desc, write_date desc) rn, a.*
		        from (
		                select  board_no, title, post_id, write_date, read_cnt, area, is_notice, is_popular
                        from board
                        where board_code = 11 and is_notice = 1 and is_del = 0
		                
		                union
		                
		                select  board_no, title, post_id, write_date, read_cnt, area, is_notice,  is_popular
                        from board
                        where board_code = 11 and is_del = 0
                        
                        union
                        
                        select board_no, title, post_id, write_date, read_cnt, area, is_notice, is_popular
                        from (
                                select  rank() over(order by like_cnt desc) rank, board_no, title, post_id, write_date, read_cnt, area, is_notice, is_popular
                                from board
                                where board_code = 11 and is_del = 0
                            )
                        where rank <= 3
					)a
				where 1=1
		]]>
				<include refid="searchCondition"></include>
		<![CDATA[
			)b
		where rn between #{startRow} and #{endRow}
		]]>
		
		
		
   </select>
	<select id="accompanyboard_getCount" parameterType="java.util.Map" resultType="int">
		select nvl(count(*),0) from board where board_code = 11 and is_del = 0
		<include refid="searchCondition"></include>
	</select>
	<!-- ============================================================================================================ -->
	<!-- 동행 후기 게시판 리스트, 카운트 -->
	<select id="accompanyreview_list" parameterType="java.util.Map" resultMap="boardDto">
		
		<![CDATA[
		select board_no, title, post_id, write_date, read_cnt, area, is_notice, is_popular
		from (
		        select row_number() over(order by is_notice desc,  is_popular desc, write_date desc) rn, a.*
		        from (
		                select  board_no, title, post_id, write_date, read_cnt, area, is_notice, is_popular
                        from board
                        where board_code = 12 and is_notice = 1 and is_del = 0
		                
		                union
		                
		                select  board_no, title, post_id, write_date, read_cnt, area, is_notice,  is_popular
                        from board
                        where board_code = 12 and is_del = 0
                        
                        union
                        
                        select board_no, title, post_id, write_date, read_cnt, area, is_notice, is_popular
                        from (
                                select  rank() over(order by like_cnt desc) rank, board_no, title, post_id, write_date, read_cnt, area, is_notice, is_popular
                                from board
                                where board_code = 12 and is_del = 0
                            )
                        where rank <= 3
					)a
				where 1=1
		]]>
				<include refid="searchCondition"></include>
		<![CDATA[
			)b
		where rn between #{startRow} and #{endRow}
		]]>
		
   </select>
	<select id="accompanyreview_getCount" parameterType="java.util.Map" resultType="int">
		select nvl(count(*),0) from board where board_code = 12 and is_del = 0
		<include refid="searchCondition"></include>
	</select>
	
	<!-- 추천 여행 경로 게시판 리스트, 카운트 -->
	<select id="recommendpath_list" parameterType="java.util.Map" resultMap="boardDto">
		
		<![CDATA[
		select board_no, title, post_id, write_date, read_cnt, area, is_notice, is_popular
		from (
		        select row_number() over(order by is_notice desc,  is_popular desc, write_date desc) rn, a.*
		        from (
		                select  board_no, title, post_id, write_date, read_cnt, area, is_notice, is_popular
                        from board
                        where board_code = 13 and is_notice = 1 and is_del = 0
		                
		                union
		                
		                select  board_no, title, post_id, write_date, read_cnt, area, is_notice,  is_popular
                        from board
                        where board_code = 13 and is_del = 0
                        
                        union
                        
                        select board_no, title, post_id, write_date, read_cnt, area, is_notice, is_popular
                        from (
                                select  rank() over(order by like_cnt desc) rank, board_no, title, post_id, write_date, read_cnt, area, is_notice, is_popular
                                from board
                                where board_code = 13 and is_del = 0
                            )
                        where rank <= 3
					)a
				where 1=1
		]]>
				<include refid="searchCondition"></include>
		<![CDATA[
			)b
		where rn between #{startRow} and #{endRow}
		]]>
		
   </select>
	<select id="recommendpath_getCount" parameterType="java.util.Map" resultType="int">
		select nvl(count(*),0) from board where board_code = 13 and is_del = 0
		<include refid="searchCondition"></include>
	</select>
	
	<!-- 여행지 후기 게시판 리스트, 카운트 -->
	<select id="travelreview_list" parameterType="java.util.Map" resultMap="boardDto">
		
		<![CDATA[
		select board_no, title, post_id, write_date, read_cnt, area, is_notice, is_popular
		from (
		        select row_number() over(order by is_notice desc,  is_popular desc, write_date desc) rn, a.*
		        from (
		                select  board_no, title, post_id, write_date, read_cnt, area, is_notice, is_popular
                        from board
                        where board_code = 14 and is_notice = 1 and is_del = 0
		                
		                union
		                
		                select  board_no, title, post_id, write_date, read_cnt, area, is_notice,  is_popular
                        from board
                        where board_code = 14 and is_del = 0
                        
                        union
                        
                        select board_no, title, post_id, write_date, read_cnt, area, is_notice, is_popular
                        from (
                                select  rank() over(order by like_cnt desc) rank, board_no, title, post_id, write_date, read_cnt, area, is_notice, is_popular
                                from board
                                where board_code = 14 and is_del = 0
                            )
                        where rank <= 3
					)a
				where 1=1
		]]>
				<include refid="searchCondition"></include>
		<![CDATA[
			)b
		where rn between #{startRow} and #{endRow}
		]]>
		
   </select>
	<select id="travelreview_getCount" parameterType="java.util.Map" resultType="int">
		select nvl(count(*),0) from board where board_code = 14 and is_del = 0
		<include refid="searchCondition"></include>
	</select>
	
	<!-- 카운트++ -->
	<update id="board_view" parameterType="int">
		<![CDATA[
		update board set read_cnt=read_cnt+1 where board_no=#{boardNo}
		]]>
	</update>
	
	<!-- 상세보기 -->
	<select id="board_read" parameterType="int" resultMap="boardDto">
		select board_no, post_id, write_date, area, title, content, read_cnt, board_code  
		from board 
		where board_no=#{boardNo} and is_del = 0
	</select>
	<!-- 지도 좌표 읽어오기 -->
	<select id="map_read" parameterType="int" resultMap="mapDto">
		select *
		from map natural join board
		where board_no=#{boardNo}
	</select>
	<!-- 파일 정보 읽어오기 file_read -->
	<select id="file_read" parameterType="int" resultMap="boardFileDto">
		select *
		from board_file natural join board
		where board_no=#{boardNo}
	</select>
	
	<!-- update -->
	<select id="board_update" parameterType="int" resultMap="boardDto">
		select *
		from board 
		where board_no=#{boardNo}
	</select>
	
	<!-- update content -->
	<update id="board_updateOk" parameterType="java.util.Map">
		update board 
		set area=#{boardDto.area}, title=#{boardDto.title}, content=#{boardDto.content}, update_date=sysdate
		where board_no=#{boardDto.boardNo}
	</update>
	
	<!-- update file -->
	<update id="board_file_updateOk" parameterType="java.util.Map">    
	MERGE INTO board_file bf 
	    USING (select * from board b where b.board_no=#{boardDto.boardNo}) 
	    ON (bf.board_no = #{boardDto.boardNo}) 
	    WHEN MATCHED THEN 
	    UPDATE SET 
	        bf.file_name=#{boardFileDto.fileName}, 
	        bf.file_path=#{boardFileDto.filePath}, 
	        bf.file_extension=#{boardFileDto.fileExtension} 
	    WHEN NOT MATCHED THEN 
	    INSERT ( 
	        bf.file_no, 
	        bf.board_no, 
	        bf.post_id, 
	        bf.board_code, 
	        bf.file_name, 
	        bf.file_path, 
	        bf.file_extension
	    )
	    VALUES (
	        FILE_NO_SEQ.nextval, 
			#{boardDto.boardNo}, 
			#{boardDto.postId}, 
			#{boardDto.boardCode}, 
			#{boardFileDto.fileName}, 
			#{boardFileDto.filePath}, 
			#{boardFileDto.fileExtension}
	     )
	</update>
	
	<!-- update map -->
	<update id="board_map_updateOk" parameterType="java.util.Map"> 
	MERGE INTO map m
	    USING (select * from board b where b.board_no=#{boardDto.boardNo}) 
	    ON (m.board_no = #{boardDto.boardNo}) 
	    WHEN MATCHED THEN 
	    UPDATE SET 
	        m.x_Axis=#{mapDto.xAxis}, 
	        m.y_Axis=#{mapDto.yAxis} 
	    WHEN NOT MATCHED THEN 
	    INSERT (
			m.map_no, 
			m.board_no, 
			m.post_id, 
			m.board_code, 
			m.x_Axis, 
			m.y_Axis 
	    )
	    VALUES (
	        map_no_seq.nextval, 
			#{boardDto.boardNo}, 
			#{boardDto.postId}, 
			#{boardDto.boardCode}, 
			#{mapDto.xAxis},  
			#{mapDto.yAxis} 
	     )
	</update>
	
	<!-- delete -->
	<update id="board_deleteOk" parameterType="java.util.Map">
		update board 
		set is_del=1
		where board_no=#{boardDto.boardNo}
	</update>
	
	<!-- 즐겨찾기 -->
	<insert id="bookmark" parameterType="java.util.Map">
		insert into bookmark (bookmark_no, id, board_no, post_id, board_code, bm_date)
		values (
				bookmark_no_seq.nextval,
				#{id},
				#{boardDto.boardNo},
				#{boardDto.postId},
				#{boardDto.boardCode},
				sysdate
				)
	</insert>
	<!-- 즐겨찾기 중복체크 -->
	<select id="bmCheck" parameterType="java.util.Map" resultType="int">
		select count(*) from bookmark where id=#{id} and board_no=#{boardNo}
	</select>
	
	<!-- 댓글입력 -->
	<insert id="replyWrite" parameterType="com.java.board.dto.ReplyDto">
		insert into reply (reply_no, board_no, post_id, board_code, id, content, write_date, is_del, group_no, sequence_no)
		values (reply_no_seq.nextval,
				#{boardNo},
				#{postId},
				#{boardCode},
				#{id},
				#{content},
				sysdate,
				#{isDel},
				#{groupNo},
				#{sequenceNo}
				)
	</insert>
	<!-- 댓글리스트 -->
	<select id="replyList" parameterType="int" resultMap="replyDto">
		select reply_no, id, write_date, content, group_no, sequence_no
		from reply
		where board_no = #{boardNo} and is_del = 0	<!-- [is_del] 0:삭제되지 않은 댓글, 1:삭제된 댓글 -->
		order by group_no, sequence_no
	</select>
	<!-- 댓글삭제 -->
	<update id="replyDel" parameterType="int">
		update reply set is_del = 1 where reply_no = #{replyNo}
	</update>
	<!-- 댓글수정 -->
	<update id="replyUpd" parameterType="com.java.board.dto.ReplyDto">
		update reply
		set content = #{content},
			update_date = sysdate
		where reply_no = #{replyNo}
	</update>
	<!-- 대댓글 max(group_no) 구하기 -->
	<select id="maxGNo" resultType="int">
		select nvl(max(group_no),0) from reply
	</select>
	<!-- 대댓글 max(sequence_no) 구하기 -->
	<select id="maxSeqNo" parameterType="int" resultType="int">
		select nvl(max(sequence_no),0) from reply where group_no = #{groupNo}
	</select>
	
	
</mapper>